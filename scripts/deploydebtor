#!/usr/bin/env node

const rt = require("./rt");

//债务管理器
rt.async_raiilock(async function() {

    rt.log("deploy Debtor...");
    const deployedStablecoin = rt.get("Stablecoin");  //稳定币合约       
    rt.log("get Stablecoin: ", deployedStablecoin);

    const govtoken = rt.configure().govtoken.address;
    rt.log("get rt.configure().govtoken: ", govtoken);

    const wet = rt.get("Wallet");
    rt.log("get Wallet: ", wet);

    const Govtoken = rt.get("Govtoken");
    rt.log("get Govtoken: ", Govtoken);

    const Debtor = await rt.rt_contract_new("Debtor", wet, deployedStablecoin, Govtoken);
    rt.log("deploy Debtor at: ", Debtor.options.address);

    const debtorAddress = Debtor.options.address;
    let tx;

    //授权

    const Stablecoin = rt.rt_contract_at("Stablecoin", deployedStablecoin);
    
    rt.log(`Stablecoin.methods.enable: Debtor => Stablecoin.mint`);
    const stablecoin_mint_sig = rt.web3().eth.abi.encodeFunctionSignature('mint(address,uint256)');
    tx = Stablecoin.methods.enable(debtorAddress, stablecoin_mint_sig);
    await rt.send(tx, deployedStablecoin);

    rt.log(`Stablecoin.methods.enable: Debtor => Stablecoin.burn`);
    const stablecoin_burn_sig = rt.web3().eth.abi.encodeFunctionSignature('burn(address,uint256)');
    tx = Stablecoin.methods.enable(debtorAddress, stablecoin_burn_sig);
    await rt.send(tx, deployedStablecoin);
    
    rt.set("Debtor", debtorAddress);
});
